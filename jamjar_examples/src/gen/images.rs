# ! [cfg_attr (rustfmt , rustfmt_skip)] # ! [allow (dead_code)] # [derive (Debug , Clone , Copy , PartialEq , Eq , PartialOrd , Ord , Hash , serde :: Serialize , serde :: Deserialize)] pub enum Image { Blit , Bubble , Heart , Palette , Star , Target , White , } impl Image { pub const ALL : & 'static [Image] = & [Image :: Blit , Image :: Bubble , Image :: Heart , Image :: Palette , Image :: Star , Image :: Target , Image :: White ,] ; } impl std :: fmt :: Display for Image { fn fmt (& self , f : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { write ! (f , "{:?}" , self) } } impl std :: str :: FromStr for Image { type Err = () ; fn from_str (s : & str) -> Result < Self , Self :: Err > { const STRINGS : & 'static [& 'static str] = & ["Blit" , "Bubble" , "Heart" , "Palette" , "Star" , "Target" , "White" ,] ; for (index , & key) in STRINGS . iter () . enumerate () { if key == s { return Ok (Image :: ALL [index]) ; } } Err (()) } }